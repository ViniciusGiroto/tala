#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[non_exhaustive]
pub enum Prefix {
    Quecto,
    Ronto,
    Yocto,
    Zepto,
    Atto,
    Femto,
    Pico,
    Nano,
    Micro,
    Milli,
    Centi,
    Deci,
    Uni,
    Deca,
    Hecto,
    Kilo,
    Mega,
    Giga,
    Tera,
    Peta,
    Exa,
    Zetta,
    Yotta,
    Ronna,
    Quetta,
}

impl Prefix {
    pub const fn as_str(&self) -> &'static str {
        match self {
            Prefix::Quecto => "q",
            Prefix::Ronto => "r",
            Prefix::Yocto => "y",
            Prefix::Zepto => "z",
            Prefix::Atto => "a",
            Prefix::Femto => "f",
            Prefix::Pico => "p",
            Prefix::Nano => "n",
            Prefix::Micro => "Î¼",
            Prefix::Milli => "m",
            Prefix::Centi => "c",
            Prefix::Deci => "d",
            Prefix::Uni => "",
            Prefix::Deca => "da",
            Prefix::Hecto => "h",
            Prefix::Kilo => "k",
            Prefix::Mega => "M",
            Prefix::Giga => "G",
            Prefix::Tera => "T",
            Prefix::Peta => "P",
            Prefix::Exa => "E",
            Prefix::Zetta => "Z",
            Prefix::Yotta => "Y",
            Prefix::Ronna => "R",
            Prefix::Quetta => "Q",
        }
    }

    pub const fn as_factor(&self) -> f32 {
        match self {
            Prefix::Quecto => 1e-30,
            Prefix::Ronto => 1e-27,
            Prefix::Yocto => 1e-24,
            Prefix::Zepto => 1e-21,
            Prefix::Atto => 1e-18,
            Prefix::Femto => 1e-15,
            Prefix::Pico => 1e-12,
            Prefix::Nano => 1e-9,
            Prefix::Micro => 1e-6,
            Prefix::Milli => 1e-3,
            Prefix::Centi => 1e-2,
            Prefix::Deci => 1e-1,
            Prefix::Uni => 1e0,
            Prefix::Deca => 1e1,
            Prefix::Hecto => 1e2,
            Prefix::Kilo => 1e3,
            Prefix::Mega => 1e6,
            Prefix::Giga => 1e9,
            Prefix::Tera => 1e12,
            Prefix::Peta => 1e15,
            Prefix::Exa => 1e18,
            Prefix::Zetta => 1e21,
            Prefix::Yotta => 1e24,
            Prefix::Ronna => 1e27,
            Prefix::Quetta => 1e30,
        }
    }

    pub const fn inverse(&self) -> Self {
        match self {
            Prefix::Quecto => Prefix::Quetta,
            Prefix::Ronto => Prefix::Ronna,
            Prefix::Yocto => Prefix::Yotta,
            Prefix::Zepto => Prefix::Zetta,
            Prefix::Atto => Prefix::Exa,
            Prefix::Femto => Prefix::Peta,
            Prefix::Pico => Prefix::Tera,
            Prefix::Nano => Prefix::Giga,
            Prefix::Micro => Prefix::Mega,
            Prefix::Milli => Prefix::Kilo,
            Prefix::Centi => Prefix::Hecto,
            Prefix::Deci => Prefix::Deca,
            Prefix::Uni => Prefix::Uni,
            Prefix::Deca => Prefix::Deci,
            Prefix::Hecto => Prefix::Centi,
            Prefix::Kilo => Prefix::Milli,
            Prefix::Mega => Prefix::Micro,
            Prefix::Giga => Prefix::Nano,
            Prefix::Tera => Prefix::Pico,
            Prefix::Peta => Prefix::Femto,
            Prefix::Exa => Prefix::Atto,
            Prefix::Zetta => Prefix::Zepto,
            Prefix::Yotta => Prefix::Yocto,
            Prefix::Ronna => Prefix::Ronto,
            Prefix::Quetta => Prefix::Quecto,
        }
    }
}
